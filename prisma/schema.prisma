generator client {
	provider = "prisma-client-js"
	previewFeatures = ["filteredRelationCount"]
}

datasource db {
	provider = "sqlite"
	url      = env("DATABASE_URL")
}

//
// Auth* tables managed by Lucia. Only used for authentication.
//

model AuthUser {
	id           String        @id @unique
	auth_session AuthSession[]
	auth_key     AuthKey[]
	cdUser       User          @relation( fields: [cdUserId], references: [id], onDelete: Cascade )
	cdUserId     Int           @unique

	@@map("auth_user")
}

model AuthSession {
	id             String	@id @unique
	user_id        String
	active_expires BigInt
	idle_expires   BigInt
	auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

	@@index([user_id])
	@@map("auth_session")
}

model AuthKey {
	id              String   @id @unique
	hashed_password String?
	user_id         String
	primary_key     Boolean
	expires         BigInt?
	auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

	@@index([user_id])
	@@map("auth_key")
}

//
// 
//

model User {
	id                          Int           @id @default(autoincrement())
	authUser                    AuthUser?
	moves                       Move[]
	studies                     LichessStudy[]
	pgns                        Pgn[]
	history                     StudyHistory[]
	lichessUsername             String?
	lichessAccessToken          String?
	lichessAccessTokenFetchedAt DateTime?
	lichessAccessTokenExpiresIn Int?
}

model Move {
	id              Int       @id @default(autoincrement())
	user            User      @relation( fields: [userId], references: [id] )
	userId          Int
	repForWhite     Boolean // true if move(+pgn) belong to White repertoire. white/black enum would have been preferred, but is not supported by prisma+sqlite.
	fromFen         String
	toFen           String
	moveSan         String
	pgns            Pgn[]
	studies         LichessStudy[]
	ownMove         Boolean // true if this is a move by the user, e.g. 1. e4 in a White repertoire
	learningDueTime DateTime? @default(now())
	learningStep    Int?      @default(0)
	reviewDueDate   DateTime? // only date, at midnight (UTC?)
	reviewInterval  Float?
	reviewEase      Float?
	deleted         Boolean @default(false)
	history         StudyHistory[]

	@@unique([ userId, repForWhite, fromFen, toFen ])
}

model LichessStudy {
	id                         Int @id @default(autoincrement())
	lichessId                  String
	user                       User @relation( fields: [userId], references: [id] )
	userId                     Int
	name                       String
	lastModifiedOnLichess      DateTime // appears unreliable -- not currently used
	lastFetched                DateTime @default(now())
	pgn                        String
	moves                      Move[]
	included                   Boolean @default(false) // true if included in repertoire
	repForWhite                Boolean? // true if pgn belongs to White repertoire
	guessedColor               String // guess on whether repertoire is w/b/u
	previewFen                 String // FEN used for board preview in repertoire view
	hidden                     Boolean @default(false) // true if hidden from the "studies" list
	updates                    LichessStudyUpdate[]

	@@unique([ userId, lichessId ])
}

// updates in progress; row removed when update has been applied
model LichessStudyUpdate {
	study                 LichessStudy @relation( fields: [studyId], references: [id] )
	studyId               Int @unique
//	name                  String?
//	lastModifiedOnLichess DateTime?
	fetched               DateTime @default(now())
	numNewMoves           Int
	numRemovedMoves       Int
	pgn                   String
}

model Pgn {
	id          Int      @id @default(autoincrement())
	user        User     @relation( fields: [userId], references: [id] )
	userId      Int
	repForWhite Boolean // true if pgn belongs to White repertoire (or false if to Black repertoire)
	filename    String
	uploaded    DateTime @default(now())
	content     String
	moves       Move[]
}

model StudyHistory {
	id                 Int      @id @default(autoincrement())
	user               User     @relation( fields: [userId], references: [id] )
	userId             Int
	move               Move     @relation( fields: [moveId], references: [id] )
	moveId             Int
	studiedAt          DateTime @default(now())
	incorrectGuessSan  String?  // guess if it was wrong, null if it was right
}
